@*
    CustomSelect - A cross-browser consistent dropdown component
    
    Usage:
    <CustomSelect @bind-Value="selectedValue" 
                  OnChange="OnSelectionChanged"
                  Class="additional-classes"
                  Size="Size.Large">
        <option value="1">Option 1</option>
        <option value="2">Option 2</option>
    </CustomSelect>
*@

<select class="@GetCssClasses()"
        @attributes="AdditionalAttributes">
    @ChildContent
</select>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public SelectSize Size { get; set; } = SelectSize.Medium;
    [Parameter] public bool Centered { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    public enum SelectSize
    {
        Small,
        Medium,
        Large
    }

    private string GetCssClasses()
    {
        var baseClasses = @"border border-slate-300/60 dark:border-slate-600/60 rounded-lg " +
                          "bg-white/80 dark:bg-slate-800/60 text-slate-900 dark:text-slate-100 " +
                          "focus:ring-2 focus:ring-teal-500 focus:border-teal-500 dark:focus:ring-teal-400 " +
                          "appearance-none cursor-pointer transition-all duration-200 " +
                          "hover:border-slate-400 dark:hover:border-slate-500 " +
                          "custom-select-arrow bg-no-repeat";

        var sizeClasses = Size switch
        {
            SelectSize.Small => "px-3 py-2 pr-8 custom-select-small",
            SelectSize.Large => "px-4 py-3 pr-10 custom-select-large",
            _ => "px-3 py-2 pr-8 custom-select-medium"
        };

        var alignmentClasses = Centered ? "text-center" : "";

        return $"{baseClasses} {sizeClasses} {alignmentClasses} {Class}".Trim();
    }

}