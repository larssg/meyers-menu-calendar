@page "/"
@using Meyers.Web.Services
@using Meyers.Web.Repositories
@using Meyers.Web.Models
@inject IHttpContextAccessor HttpContextAccessor
@inject IMenuRepository MenuRepository
@inject CalendarService CalendarService

<PageTitle>Meyers Menu Calendar</PageTitle>

<div class="max-w-5xl mx-auto">
    <!-- Hero -->
    <section class="text-center mb-12">
        <span class="kicker">Calendar feed for lunch menus</span>
        <h2 class="mt-2 text-4xl font-extrabold tracking-tight
               text-slate-900 dark:text-white">
            Never miss lunch again
        </h2>
        <p class="mt-3 text-lg text-slate-600 dark:text-slate-300 max-w-2xl mx-auto">
            Get Meyers daily menus delivered straight to your calendar. Simple,
            automatic, and always up to date.
        </p>

        @if (menuTypes.Any())
        {
            <div class="mt-6">
                <div role="tablist" aria-label="Menu types"
                     class="flex flex-wrap justify-center gap-2">
                    @foreach (var menuType in menuTypes)
                    {
                        var isActive = menuType.Id == selectedMenuTypeId;
                        <button
                            role="tab"
                            aria-selected="@(isActive.ToString().ToLower())"
                            aria-controls="menuTypePanel"
                            id="tab-@menuType.Id"
                            data-slug="@menuType.Slug"
                            class="px-4 py-2 text-sm font-medium transition-colors rounded-lg border border-slate-200 dark:border-slate-700
                                   @(isActive
                                                                          ? "bg-teal-600 text-white border-teal-600"
                                                                          : "bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700/60")"
                            onclick="selectMenuTab(@menuType.Id)">
                            @menuType.Name
                        </button>
                    }
                </div>
            </div>
        }

        <div class="sr-only" id="menuTypePanel"></div>

        <div class="mt-6 flex items-center justify-center">
            <CopyButton InputId="calendarUrl" CssClass="btn-primary">
                Copy Calendar Feed URL
            </CopyButton>
        </div>
        <div class="mt-3">
            <span class="pill">Works with Google, Outlook, Apple Calendar</span>
        </div>
    </section>

    <div class="grid lg:grid-cols-2 gap-8">
        <!-- Calendar Feed Section -->
        <div class="card p-8">
            <h3 class="text-xl font-semibold text-slate-900 dark:text-slate-100 mb-6 flex items-center">
                <span class="text-2xl mr-3">üìÖ</span>
                Calendar Feed URL
            </h3>

            <div>
                <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                    Calendar Feed URL (.ics) - <span id="selectedMenuTypeName">@GetSelectedMenuTypeName()</span>
                </label>
                <div class="flex rounded-lg border border-slate-300/60 dark:border-slate-600/60 overflow-hidden
                    bg-white/80 dark:bg-slate-800/60 backdrop-blur">
                    <input type="text" id="calendarUrl" value="@GetCalendarIcsUrl()" readonly class="copy-input"/>
                    <CopyButton InputId="calendarUrl">
                        Copy
                    </CopyButton>
                </div>
            </div>

            <div class="mt-6 p-6 rounded-xl border border-teal-200/60 dark:border-teal-700/50
                  bg-teal-50/70 dark:bg-teal-900/20">
                <h4 class="font-semibold text-slate-900 dark:text-slate-100 mb-3">
                    How to add to your calendar
                </h4>
                <ul class="text-sm text-slate-700 dark:text-slate-300 space-y-2">
                    <li class="flex items-start"><span class="font-medium mr-2">Google Calendar:</span> Settings ‚Üí Add
                        calendar ‚Üí From URL
                    </li>
                    <li class="flex items-start"><span class="font-medium mr-2">Outlook:</span> Add calendar ‚Üí Subscribe
                        from web
                    </li>
                    <li class="flex items-start"><span class="font-medium mr-2">Apple Calendar:</span> File ‚Üí New
                        Calendar Subscription
                    </li>
                </ul>
            </div>
        </div>

        <!-- Menu Preview Section -->
        <div class="card p-8">
            <div class="mb-4">
                <h3 class="text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center">
                    <span class="text-2xl mr-3">üçΩÔ∏è</span>
                    Menu Preview
                </h3>
                <p class="text-sm text-slate-400 dark:text-slate-40 flex items-center">
                    <span class="text-2xl mr-3 opacity-0" aria-hidden="true">üçΩÔ∏è</span>
                    <span id="previewMenuTypeName">@GetSelectedMenuTypeName()</span>
                </p>
            </div>

            <div class="space-y-6">
                <div class="rounded-xl p-6 border bg-gradient-to-r
                    from-orange-50 to-white dark:from-orange-900/20 dark:to-transparent
                    border-orange-200/70 dark:border-orange-700/50">
                    <h4 class="font-semibold text-orange-900 dark:text-orange-300 mb-3 flex items-center">
                        <span class="w-2 h-2 bg-orange-500 rounded-full mr-2"></span>
                        Today‚Äôs Menu
                    </h4>
                    <div id="todayMenuContent">
                        @if (todayMenu != null)
                        {
                            <div>
                                <p class="font-medium text-slate-900 dark:text-slate-100 text-base">
                                    @CalendarService.CleanupTitle(todayMenu.MainDish)
                                </p>
                                @if (!string.IsNullOrEmpty(todayMenu.Details))
                                {
                                    <p class="text-slate-600 dark:text-slate-300 mt-2 text-sm">
                                        @todayMenu.Details
                                    </p>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-slate-500 dark:text-slate-400 text-sm">No menu available for today</p>
                        }
                    </div>
                </div>

                <div class="rounded-xl p-6 border bg-gradient-to-r
                    from-teal-50 to-white dark:from-teal-900/20 dark:to-transparent
                    border-teal-200/70 dark:border-teal-700/50">
                    <h4 class="font-semibold text-teal-900 dark:text-teal-300 mb-3 flex items-center">
                        <span class="w-2 h-2 bg-teal-600 rounded-full mr-2"></span>
                        Tomorrow‚Äôs Menu
                    </h4>
                    <div id="tomorrowMenuContent">
                        @if (tomorrowMenu != null)
                        {
                            <div>
                                <p class="font-medium text-slate-900 dark:text-slate-100 text-base">
                                    @CalendarService.CleanupTitle(tomorrowMenu.MainDish)
                                </p>
                                @if (!string.IsNullOrEmpty(tomorrowMenu.Details))
                                {
                                    <p class="text-slate-600 dark:text-slate-300 mt-2 text-sm">
                                        @tomorrowMenu.Details
                                    </p>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-slate-500 dark:text-slate-400 text-sm">No menu available for tomorrow</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Last updated timestamp -->
    <div class="mt-12 text-center">
        <p class="text-xs text-slate-500 dark:text-slate-400">
            @FormatLastUpdated()
        </p>
    </div>
</div>

@code {
    private MenuEntry? todayMenu;
    private MenuEntry? tomorrowMenu;
    private DateTime? lastUpdated;
    private List<MenuType> menuTypes = new();
    private int selectedMenuTypeId = 1; // Default to "Det velkendte"
    private Dictionary<int, (MenuEntry? today, MenuEntry? tomorrow)> allMenuPreviews = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load available menu types
            menuTypes = await MenuRepository.GetMenuTypesAsync();

            // Set default to "Det velkendte" if available
            var defaultMenuType = menuTypes.FirstOrDefault(mt => mt.Slug == "det-velkendte");
            if (defaultMenuType != null)
            {
                selectedMenuTypeId = defaultMenuType.Id;
            }
            else if (menuTypes.Any())
            {
                selectedMenuTypeId = menuTypes.First().Id;
            }

            TimeZoneInfo copenhagenTimeZone;
            try
            {
                copenhagenTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time");
            }
            catch
            {
                try
                {
                    copenhagenTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/Copenhagen");
                }
                catch
                {
                    copenhagenTimeZone = TimeZoneInfo.Utc;
                }
            }

            var copenhagenNow = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, copenhagenTimeZone);
            var today = copenhagenNow.Date;
            var tomorrow = today.AddDays(1);

            // Load all menu previews at once
            allMenuPreviews = await MenuRepository.GetAllMenuPreviewsAsync(today, tomorrow);
            
            // Set the currently selected menu
            if (allMenuPreviews.ContainsKey(selectedMenuTypeId))
            {
                var (todayEntry, tomorrowEntry) = allMenuPreviews[selectedMenuTypeId];
                todayMenu = todayEntry;
                tomorrowMenu = tomorrowEntry;
            }
            
            lastUpdated = await MenuRepository.GetLastUpdateTimeAsync();
        }
        catch
        {
            todayMenu = null;
            tomorrowMenu = null;
            lastUpdated = null;
            allMenuPreviews = new();
        }
    }

    private string FormatLastUpdated()
    {
        if (lastUpdated == null)
            return "Menu data not available";

        var localTime = lastUpdated.Value.ToLocalTime();
        var timeAgo = DateTime.Now - localTime;

        if (timeAgo.TotalMinutes < 1)
            return "Menu updated just now";
        else if (timeAgo.TotalHours < 1)
            return $"Menu updated {(int)timeAgo.TotalMinutes} minutes ago";
        else if (timeAgo.TotalDays < 1)
            return $"Menu updated {(int)timeAgo.TotalHours} hours ago";
        else
            return $"Menu updated {localTime:MMM d, yyyy 'at' h:mm tt}";
    }

    private string GetCalendarIcsUrl()
    {
        var request = HttpContextAccessor?.HttpContext?.Request;
        var selectedMenuType = menuTypes.FirstOrDefault(mt => mt.Id == selectedMenuTypeId);

        if (selectedMenuType != null)
        {
            if (request == null) return $"/calendar/{selectedMenuType.Slug}.ics";

            // Always use HTTPS for production URLs
            var scheme = request.IsHttps || request.Headers.ContainsKey("X-Forwarded-Proto") ? "https" : request.Scheme;
            return $"{scheme}://{request.Host}/calendar/{selectedMenuType.Slug}.ics";
        }

        // Fallback to det-velkendte if no menu type found
        if (request == null) return "/calendar/det-velkendte.ics";

        // Always use HTTPS for production URLs
        var fallbackScheme = request.IsHttps || request.Headers.ContainsKey("X-Forwarded-Proto") ? "https" : request.Scheme;
        return $"{fallbackScheme}://{request.Host}/calendar/det-velkendte.ics";
    }

    private string GetSelectedMenuTypeName()
    {
        var selectedMenuType = menuTypes.FirstOrDefault(mt => mt.Id == selectedMenuTypeId);
        return selectedMenuType?.Name ?? "Det velkendte";
    }

}

@{
    if (allMenuPreviews.Any())
    {
        var menuData = System.Text.Json.JsonSerializer.Serialize(new
        {
            menuPreviews = allMenuPreviews.ToDictionary(
                kvp => kvp.Key,
                kvp => new
                {
                    today = kvp.Value.today != null ? new { title = CalendarService.CleanupTitle(kvp.Value.today.MainDish) } : null,
                    tomorrow = kvp.Value.tomorrow != null ? new { title = CalendarService.CleanupTitle(kvp.Value.tomorrow.MainDish) } : null
                }
            )
        });
        <script>
            window.menuPreviewData = @((MarkupString)menuData);
        </script>
    }
}
