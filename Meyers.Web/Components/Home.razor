@page "/"
@using Meyers.Web.Services
@using Meyers.Web.Repositories
@using Meyers.Web.Models
@inject IHttpContextAccessor HttpContextAccessor
@inject IMenuRepository MenuRepository
@inject CalendarService CalendarService

<PageTitle>Meyers Menu Calendar</PageTitle>

<div class="max-w-5xl mx-auto">
    <!-- Hero -->
    <section class="text-center mb-12">
        <span class="kicker">Calendar feed for lunch menus</span>
        <h2 class="mt-2 text-4xl font-extrabold tracking-tight
               text-slate-900 dark:text-white">
            Never miss lunch again
        </h2>
        <p class="mt-3 text-lg text-slate-600 dark:text-slate-300 max-w-2xl mx-auto">
            Get Meyers daily menus delivered straight to your calendar. Simple,
            automatic, and always up to date.
        </p>

        @if (menuTypes.Any())
        {
            <div class="mt-6">
                <div role="tablist" aria-label="Menu types"
                     class="inline-flex rounded-lg border border-slate-200 dark:border-slate-700 overflow-hidden">
                    @foreach (var menuType in menuTypes)
                    {
                        var isActive = menuType.Id == selectedMenuTypeId;
                        <button
                            role="tab"
                            aria-selected="@(isActive.ToString().ToLower())"
                            aria-controls="menuTypePanel"
                            id="tab-@menuType.Id"
                            class="px-4 py-2 text-sm font-medium transition-colors @(isActive
                                   ? "bg-teal-600 text-white"
                                   : "bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700/60 border-l border-slate-200 dark:border-slate-700")"
                            onclick="selectMenuTab(@menuType.Id, '@menuType.Slug', '@menuType.Name')">
                            @menuType.Name
                        </button>
                    }
                </div>
            </div>
        }

        <div class="sr-only" id="menuTypePanel"></div>

        <div class="mt-6 flex items-center justify-center">
            <button class="btn-primary" id="heroCopyButton"
                    onclick="copyToClipboard(document.getElementById('calendarUrl')?.value || '@GetCalendarIcsUrl()')">
                Copy Calendar Feed URL (<span id="heroMenuTypeName">@GetSelectedMenuTypeName()</span>)
            </button>
        </div>
        <div class="mt-3">
            <span class="pill">Works with Google, Outlook, Apple Calendar</span>
        </div>
    </section>

    <div class="grid lg:grid-cols-2 gap-8">
        <!-- Calendar Feed Section -->
        <div class="card p-8">
            <h3 class="text-xl font-semibold text-slate-900 dark:text-slate-100 mb-6 flex items-center">
                <span class="text-2xl mr-3">üìÖ</span>
                Calendar Feed URL
            </h3>

            <div>
                <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                    Calendar Feed URL (.ics) - <span id="selectedMenuTypeName">@GetSelectedMenuTypeName()</span>
                </label>
                <div class="flex rounded-lg border border-slate-300/60 dark:border-slate-600/60 overflow-hidden
                    bg-white/80 dark:bg-slate-800/60 backdrop-blur">
                    <input type="text" id="calendarUrl" value="@GetCalendarIcsUrl()" readonly class="copy-input"/>
                    <button id="copyButton" onclick="copyToClipboard(document.getElementById('calendarUrl').value)"
                            class="px-5 py-3 font-medium text-white bg-teal-700 hover:bg-teal-600 transition-colors">
                        Copy
                    </button>
                </div>
            </div>

            <div class="mt-8 p-6 rounded-xl border border-teal-200/60 dark:border-teal-700/50
                  bg-teal-50/70 dark:bg-teal-900/20">
                <h4 class="font-semibold text-slate-900 dark:text-slate-100 mb-3">
                    How to add to your calendar
                </h4>
                <ul class="text-sm text-slate-700 dark:text-slate-300 space-y-2">
                    <li class="flex items-start"><span class="font-medium mr-2">Google Calendar:</span> Settings ‚Üí Add
                        calendar ‚Üí From URL
                    </li>
                    <li class="flex items-start"><span class="font-medium mr-2">Outlook:</span> Add calendar ‚Üí Subscribe
                        from web
                    </li>
                    <li class="flex items-start"><span class="font-medium mr-2">Apple Calendar:</span> File ‚Üí New
                        Calendar Subscription
                    </li>
                </ul>
            </div>
        </div>

        <!-- Menu Preview Section -->
        <div class="card p-8">
            <div class="mb-6">
                <h3 class="text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center">
                    <span class="text-2xl mr-3">üçΩÔ∏è</span>
                    Menu Preview
                </h3>
                <p class="text-sm text-slate-600 dark:text-slate-400 mt-1 ml-9">
                    <span id="previewMenuTypeName">@GetSelectedMenuTypeName()</span>
                </p>
            </div>

            <div class="space-y-6">
                <div class="rounded-xl p-6 border bg-gradient-to-r
                    from-orange-50 to-white dark:from-orange-900/20 dark:to-transparent
                    border-orange-200/70 dark:border-orange-700/50">
                    <h4 class="font-semibold text-orange-900 dark:text-orange-300 mb-3 flex items-center">
                        <span class="w-2 h-2 bg-orange-500 rounded-full mr-2"></span>
                        Today‚Äôs Menu
                    </h4>
                    <div id="todayMenuContent">
                        @if (todayMenu != null)
                        {
                            <div>
                                <p class="font-medium text-slate-900 dark:text-slate-100 text-base">
                                    @CalendarService.CleanupTitle(todayMenu.MainDish)
                                </p>
                                @if (!string.IsNullOrEmpty(todayMenu.Details))
                                {
                                    <p class="text-slate-600 dark:text-slate-300 mt-2 text-sm">
                                        @todayMenu.Details
                                    </p>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-slate-500 dark:text-slate-400 text-sm">No menu available for today</p>
                        }
                    </div>
                </div>

                <div class="rounded-xl p-6 border bg-gradient-to-r
                    from-teal-50 to-white dark:from-teal-900/20 dark:to-transparent
                    border-teal-200/70 dark:border-teal-700/50">
                    <h4 class="font-semibold text-teal-900 dark:text-teal-300 mb-3 flex items-center">
                        <span class="w-2 h-2 bg-teal-600 rounded-full mr-2"></span>
                        Tomorrow‚Äôs Menu
                    </h4>
                    <div id="tomorrowMenuContent">
                        @if (tomorrowMenu != null)
                        {
                            <div>
                                <p class="font-medium text-slate-900 dark:text-slate-100 text-base">
                                    @CalendarService.CleanupTitle(tomorrowMenu.MainDish)
                                </p>
                                @if (!string.IsNullOrEmpty(tomorrowMenu.Details))
                                {
                                    <p class="text-slate-600 dark:text-slate-300 mt-2 text-sm">
                                        @tomorrowMenu.Details
                                    </p>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-slate-500 dark:text-slate-400 text-sm">No menu available for tomorrow</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Last updated timestamp -->
    <div class="mt-12 text-center">
        <p class="text-xs text-slate-500 dark:text-slate-400">
            @FormatLastUpdated()
        </p>
    </div>
</div>

<script>
    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(function () {
            const id = "copy-toast";
            const existing = document.getElementById(id);
            if (existing) existing.remove();
            const toast = document.createElement("div");
            toast.id = id;
            toast.textContent = "Copied to clipboard";
            toast.className =
                "fixed bottom-6 left-1/2 -translate-x-1/2 z-50 px-4 py-2 " +
                "rounded-lg bg-teal-700 text-white text-sm shadow";
            document.body.appendChild(toast);
            setTimeout(() => toast.remove(), 1800);
        });
    }

    async function updateMenuType(menuTypeId) {
        const selector = document.getElementById('menuTypeSelector');
        const selectedOption = selector ? selector.options[selector.selectedIndex] : null;
        const slug = selectedOption ? selectedOption.getAttribute('data-slug') : null;
        const name = selectedOption ? selectedOption.getAttribute('data-name') : null;

        const baseUrl = window.location.origin;

        // If slug/name not from select (tabs path), derive from active tab's attributes
        let effectiveSlug = slug;
        let effectiveName = name;
        if (!effectiveSlug || !effectiveName) {
            const activeTab = document.getElementById(`tab-${menuTypeId}`);
            if (activeTab) {
                effectiveName = activeTab.textContent.trim();
                // Slug is used only to build URL; fallback to data attr if present
                effectiveSlug = activeTab.getAttribute('data-slug') || null;
            }
        }

        // If we still don't have a slug, fetch it from server API as fallback
        // but try to infer from calendarUrl if already present
        if (!effectiveSlug) {
            try {
                // Attempt to parse current URL‚Äôs slug and swap by id is non-trivial here;
                // instead we optimistically call an endpoint if you have one.
                // For now, gracefully skip and let the API preview update still work.
            } catch { /* noop */ }
        }

        // Update the calendar URL
        const urlSlug = effectiveSlug || (selectedOption ? selectedOption.getAttribute('data-slug') : null);
        if (urlSlug) {
            const calendarUrl = `${baseUrl}/calendar/${urlSlug}.ics`;
            const input = document.getElementById('calendarUrl');
            if (input) input.value = calendarUrl;
        }

        // Update all menu type name displays
        const displayName = effectiveName ||
            (selectedOption ? selectedOption.getAttribute('data-name') : null);
        if (displayName) {
            const ids = ['selectedMenuTypeName', 'heroMenuTypeName', 'previewMenuTypeName'];
            ids.forEach((id) => {
                const el = document.getElementById(id);
                if (el) el.textContent = displayName;
            });
        }

        // Hide the refresh note since we're loading dynamically
        const refreshNote = document.getElementById('refreshNote');
        if (refreshNote) {
            refreshNote.classList.add('hidden');
        }

        // Show loading state
        const todayContent = document.getElementById('todayMenuContent');
        const tomorrowContent = document.getElementById('tomorrowMenuContent');

        const loadingHtml = '<p class="text-slate-500 dark:text-slate-400 text-sm">Loading...</p>';
        if (todayContent) todayContent.innerHTML = loadingHtml;
        if (tomorrowContent) tomorrowContent.innerHTML = loadingHtml;

        // Fetch new menu preview
        try {
            const response = await fetch(`/api/menu-preview/${menuTypeId}`);
            if (response.ok) {
                const data = await response.json();

                // Update today's menu
                if (todayContent) {
                    if (data.today) {
                        let todayHtml =
                            '<div><p class="font-medium text-slate-900 dark:text-slate-100 text-base">' +
                            escapeHtml(data.today.title) +
                            '</p>';
                        if (data.today.details) {
                            todayHtml +=
                                '<p class="text-slate-600 dark:text-slate-300 mt-2 text-sm">' +
                                escapeHtml(data.today.details) +
                                '</p>';
                        }
                        todayHtml += '</div>';
                        todayContent.innerHTML = todayHtml;
                    } else {
                        todayContent.innerHTML =
                            '<p class="text-slate-500 dark:text-slate-400 text-sm">No menu available for today</p>';
                    }
                }

                // Update tomorrow's menu
                if (tomorrowContent) {
                    if (data.tomorrow) {
                        let tomorrowHtml =
                            '<div><p class="font-medium text-slate-900 dark:text-slate-100 text-base">' +
                            escapeHtml(data.tomorrow.title) +
                            '</p>';
                        if (data.tomorrow.details) {
                            tomorrowHtml +=
                                '<p class="text-slate-600 dark:text-slate-300 mt-2 text-sm">' +
                                escapeHtml(data.tomorrow.details) +
                                '</p>';
                        }
                        tomorrowHtml += '</div>';
                        tomorrowContent.innerHTML = tomorrowHtml;
                    } else {
                        tomorrowContent.innerHTML =
                            '<p class="text-slate-500 dark:text-slate-400 text-sm">No menu available for tomorrow</p>';
                    }
                }
            } else {
                const errorHtml =
                    '<p class="text-slate-500 dark:text-slate-400 text-sm">Failed to load menu</p>';
                if (todayContent) todayContent.innerHTML = errorHtml;
                if (tomorrowContent) tomorrowContent.innerHTML = errorHtml;
            }
        } catch (error) {
            console.error('Failed to fetch menu preview:', error);
            const errorHtml =
                '<p class="text-slate-500 dark:text-slate-400 text-sm">Failed to load menu</p>';
            if (todayContent) todayContent.innerHTML = errorHtml;
            if (tomorrowContent) tomorrowContent.innerHTML = errorHtml;
        }
    }

    function escapeHtml(text) {
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, (m) => map[m]);
    }

    let refreshInterval;

    function startAutoRefresh() {
        refreshInterval = setInterval(() => {
            console.log("Auto-refreshing menu data...");
            window.location.reload();
        }, 3600000);
    }

    function stopAutoRefresh() {
        if (refreshInterval) {
            clearInterval(refreshInterval);
            refreshInterval = null;
        }
    }

    document.addEventListener("DOMContentLoaded", startAutoRefresh);
    document.addEventListener("visibilitychange", () => {
        if (document.hidden) stopAutoRefresh();
        else startAutoRefresh();
    });
    window.addEventListener("beforeunload", stopAutoRefresh);

    // Tabs helper: activate a menu type tab and reuse existing update flow
    function selectMenuTab(menuTypeId, slug, name) {
        // Update active tab styling
        const tablist = document.querySelector('[role="tablist"]');
        if (tablist) {
            const tabs = tablist.querySelectorAll('[role="tab"]');
            tabs.forEach((t) => {
                const isActive = t.id === `tab-${menuTypeId}`;
                t.setAttribute('aria-selected', isActive ? 'true' : 'false');
                t.className =
                    'px-4 py-2 text-sm font-medium transition-colors ' +
                    (isActive
                        ? 'bg-teal-600 text-white'
                        : 'bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700/60 border-l border-slate-200 dark:border-slate-700');
                // store slug for potential later use
                if (!t.getAttribute('data-slug') && slug && isActive) {
                    t.setAttribute('data-slug', slug);
                }
            });
        }

        // Update displayed names immediately
        const ids = ['selectedMenuTypeName', 'heroMenuTypeName', 'previewMenuTypeName'];
        ids.forEach((id) => {
            const el = document.getElementById(id);
            if (el && name) el.textContent = name;
        });

        // Update URL input immediately
        const baseUrl = window.location.origin;
        if (slug) {
            const calendarUrl = `${baseUrl}/calendar/${slug}.ics`;
            const input = document.getElementById('calendarUrl');
            if (input) input.value = calendarUrl;
        }

        // Trigger data refresh via existing function
        updateMenuType(menuTypeId);
    }
</script>

@code {
    private MenuEntry? todayMenu;
    private MenuEntry? tomorrowMenu;
    private DateTime? lastUpdated;
    private List<MenuType> menuTypes = new();
    private int selectedMenuTypeId = 1; // Default to "Det velkendte"

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load available menu types
            menuTypes = await MenuRepository.GetMenuTypesAsync();

            // Set default to "Det velkendte" if available
            var defaultMenuType = menuTypes.FirstOrDefault(mt => mt.Slug == "det-velkendte");
            if (defaultMenuType != null)
            {
                selectedMenuTypeId = defaultMenuType.Id;
            }
            else if (menuTypes.Any())
            {
                selectedMenuTypeId = menuTypes.First().Id;
            }

            TimeZoneInfo copenhagenTimeZone;
            try
            {
                copenhagenTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time");
            }
            catch
            {
                try
                {
                    copenhagenTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/Copenhagen");
                }
                catch
                {
                    copenhagenTimeZone = TimeZoneInfo.Utc;
                }
            }

            var copenhagenNow = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, copenhagenTimeZone);
            var today = copenhagenNow.Date;
            var tomorrow = today.AddDays(1);

            await LoadMenusForSelectedType(today, tomorrow);
            lastUpdated = await MenuRepository.GetLastUpdateTimeAsync();
        }
        catch
        {
            todayMenu = null;
            tomorrowMenu = null;
            lastUpdated = null;
        }
    }

    private async Task LoadMenusForSelectedType(DateTime today, DateTime tomorrow)
    {
        todayMenu = await MenuRepository.GetMenuForDateAsync(today, selectedMenuTypeId);
        tomorrowMenu = await MenuRepository.GetMenuForDateAsync(tomorrow, selectedMenuTypeId);
    }

    private string FormatLastUpdated()
    {
        if (lastUpdated == null)
            return "Menu data not available";

        var localTime = lastUpdated.Value.ToLocalTime();
        var timeAgo = DateTime.Now - localTime;

        if (timeAgo.TotalMinutes < 1)
            return "Menu updated just now";
        else if (timeAgo.TotalHours < 1)
            return $"Menu updated {(int)timeAgo.TotalMinutes} minutes ago";
        else if (timeAgo.TotalDays < 1)
            return $"Menu updated {(int)timeAgo.TotalHours} hours ago";
        else
            return $"Menu updated {localTime:MMM d, yyyy 'at' h:mm tt}";
    }

    private string GetCalendarIcsUrl()
    {
        var request = HttpContextAccessor?.HttpContext?.Request;
        var selectedMenuType = menuTypes.FirstOrDefault(mt => mt.Id == selectedMenuTypeId);

        if (selectedMenuType != null)
        {
            if (request == null) return $"/calendar/{selectedMenuType.Slug}.ics";
            return $"{request.Scheme}://{request.Host}/calendar/{selectedMenuType.Slug}.ics";
        }

        // Fallback to det-velkendte if no menu type found
        if (request == null) return "/calendar/det-velkendte.ics";
        return $"{request.Scheme}://{request.Host}/calendar/det-velkendte.ics";
    }

    private string GetSelectedMenuTypeName()
    {
        var selectedMenuType = menuTypes.FirstOrDefault(mt => mt.Id == selectedMenuTypeId);
        return selectedMenuType?.Name ?? "Det velkendte";
    }
}
