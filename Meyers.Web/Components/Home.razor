@page "/"
@using System.Text.Json
@using Meyers.Core.Interfaces
@using Meyers.Core.Models
@inject IHttpContextAccessor HttpContextAccessor
@inject IMenuRepository MenuRepository
@inject ICalendarService CalendarService
@inject ITimeZoneService TimeZoneService

<PageTitle>Meyers Menu Calendar</PageTitle>

<div class="max-w-5xl mx-auto">
    <!-- Hero -->
    <section class="text-center mb-12">
        <span class="kicker">Calendar feed for lunch menus</span>
        <h2 class="mt-2 text-4xl font-extrabold tracking-tight
               text-slate-900 dark:text-white">
            Never miss lunch again
        </h2>
        <p class="mt-3 text-lg text-slate-600 dark:text-slate-300 max-w-2xl mx-auto">
            Get Meyers daily menus delivered straight to your calendar. Simple,
            automatic, and always up to date.
        </p>

    </section>

    <!-- Menu Selection Interface -->
    <section class="mb-12">
        <div class="card p-4 sm:p-8 max-w-4xl mx-auto">
            <!-- Radio Button Selection -->
            <div class="mb-8">
                <div class="flex flex-col sm:flex-row items-center justify-center gap-4 sm:gap-8">
                    <label class="flex items-center cursor-pointer">
                        <input type="radio" name="menuMode" value="simple" class="mr-3 w-4 h-4 text-teal-600 
                               bg-gray-100 border-gray-300 focus:ring-teal-500 dark:focus:ring-teal-600 
                               dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                               checked onchange="toggleMenuMode()">
                        <span class="text-base sm:text-lg font-medium text-slate-900 dark:text-slate-100">
                            Simple - One menu for all days
                        </span>
                    </label>
                    <label class="flex items-center cursor-pointer">
                        <input type="radio" name="menuMode" value="custom" class="mr-3 w-4 h-4 text-teal-600 
                               bg-gray-100 border-gray-300 focus:ring-teal-500 dark:focus:ring-teal-600 
                               dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                               onchange="toggleMenuMode()">
                        <span class="text-base sm:text-lg font-medium text-slate-900 dark:text-slate-100">
                            Custom - Different menus per day
                        </span>
                    </label>
                </div>
            </div>

            <!-- Simple Mode: Single Dropdown -->
            <div id="simpleMode">
                <div class="max-w-md mx-auto">
                    <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-3 text-center">
                        Select menu for all weekdays
                    </label>
                    <select id="simpleMenuSelect" class="w-full px-4 py-3 border border-slate-300/60 dark:border-slate-600/60 rounded-lg 
                                   bg-white/80 dark:bg-slate-800/60 text-slate-900 dark:text-slate-100 text-center
                                   focus:ring-2 focus:ring-teal-500 focus:border-teal-500 dark:focus:ring-teal-400"
                            onchange="updateCalendarUrl()">
                        @foreach (var menuType in menuTypes)
                        {
                            var isSelected = menuType.Slug == "det-velkendte";
                            <option value="@menuType.Id" data-slug="@menuType.Slug"
                                    selected="@isSelected">@menuType.Name</option>
                        }
                    </select>
                </div>
            </div>

            <!-- Custom Mode: Five Dropdowns -->
            <div id="customMode" class="hidden">
                <div class="max-w-2xl mx-auto">
                    <div class="space-y-4">
                        @foreach (var day in new[]
                                      {
                                          (DayOfWeek.Monday, "Monday"),
                                          (DayOfWeek.Tuesday, "Tuesday"),
                                          (DayOfWeek.Wednesday, "Wednesday"),
                                          (DayOfWeek.Thursday, "Thursday"),
                                          (DayOfWeek.Friday, "Friday")
                                      })
                        {
                            <div
                                class="flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 rounded-lg border border-slate-200 dark:border-slate-700 bg-slate-50/50 dark:bg-slate-800/50 gap-3">
                                <span class="font-medium text-slate-900 dark:text-slate-100 text-sm sm:text-base">
                                    @day.Item2
                                </span>
                                <select class="custom-day-select w-full sm:max-w-xs px-3 py-2 border border-slate-300/60 dark:border-slate-600/60 rounded-lg 
                                               bg-white/80 dark:bg-slate-800/60 text-slate-900 dark:text-slate-100 
                                               focus:ring-2 focus:ring-teal-500 focus:border-teal-500 dark:focus:ring-teal-400"
                                        data-day="@((int)day.Item1)" onchange="updateCalendarUrl()">
                                    @foreach (var menuType in menuTypes)
                                    {
                                        var isSelected = (day.Item1 == DayOfWeek.Monday && menuType.Slug == "det-velkendte") ||
                                                             (day.Item1 == DayOfWeek.Tuesday && menuType.Slug == "det-velkendte") ||
                                                             (day.Item1 == DayOfWeek.Wednesday && menuType.Slug == "det-velkendte") ||
                                                             (day.Item1 == DayOfWeek.Thursday && menuType.Slug == "den-groenne") ||
                                                             (day.Item1 == DayOfWeek.Friday && menuType.Slug == "det-velkendte");
                                        <option value="@menuType.Id" data-slug="@menuType.Slug"
                                                selected="@isSelected">@menuType.Name</option>
                                    }
                                </select>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Weekly Calendar Preview -->
    <section class="mb-12">
        <div class="card p-4 sm:p-8 max-w-6xl mx-auto">
            <h3 class="text-2xl font-semibold text-slate-900 dark:text-slate-100 mb-6 text-center flex items-center justify-center">
                <span class="text-2xl mr-3">ðŸ“…</span>
                Next 7 Days Preview
            </h3>

            <div id="weeklyPreview" class="grid grid-cols-1 md:grid-cols-7 gap-2 mb-8">
                <!-- This will be populated by JavaScript -->
            </div>

            <!-- Calendar URL and Instructions -->
            <div class="border-t border-slate-200 dark:border-slate-700 pt-8">
                <div class="max-w-2xl mx-auto">
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-3 text-center">
                            Your Calendar Feed URL
                        </label>
                        <div class="flex rounded-lg border border-slate-300/60 dark:border-slate-600/60 overflow-hidden
                            bg-white/80 dark:bg-slate-800/60 backdrop-blur">
                            <input type="text" id="calendarUrl" value="" readonly class="copy-input"/>
                            <CopyButton InputId="calendarUrl" CssClass="btn-primary">
                                Copy Calendar Feed URL
                            </CopyButton>
                        </div>
                    </div>

                    <div class="mb-6 flex justify-center">
                        <label class="flex items-center cursor-pointer">
                            <input type="checkbox" id="alarmCheckbox" class="mr-3 w-4 h-4 text-teal-600 
                                   bg-gray-100 border-gray-300 focus:ring-teal-500 dark:focus:ring-teal-600 
                                   dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                                   onchange="updateCalendarUrl()">
                            <span class="text-sm font-medium text-slate-700 dark:text-slate-300">
                                ðŸ”” Add 5-minute alarm before lunch
                            </span>
                        </label>
                    </div>

                    <div class="p-6 rounded-xl border border-teal-200/60 dark:border-teal-700/50
                          bg-teal-50/70 dark:bg-teal-900/20">
                        <h4 class="font-semibold text-slate-900 dark:text-slate-100 mb-3 text-center">
                            How to add to your calendar
                        </h4>
                        <div class="grid md:grid-cols-3 gap-4 text-sm text-slate-700 dark:text-slate-300">
                            <div class="text-center">
                                <span class="font-medium block mb-1">Google Calendar</span>
                                <span>Settings â†’ Add calendar â†’ From URL</span>
                            </div>
                            <div class="text-center">
                                <span class="font-medium block mb-1">Outlook</span>
                                <span>Add calendar â†’ Subscribe from web</span>
                            </div>
                            <div class="text-center">
                                <span class="font-medium block mb-1">Apple Calendar</span>
                                <span>File â†’ New Calendar Subscription</span>
                            </div>
                        </div>
                        <div class="mt-4 text-center">
                            <span class="pill">Works with Google, Outlook, Apple Calendar</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Last updated timestamp -->
    <div class="mt-12 text-center">
        <p class="text-xs text-slate-500 dark:text-slate-400">
            @FormatLastUpdated()
        </p>
    </div>
</div>

@code {
    private DateTime? lastUpdated;
    private List<MenuType> menuTypes = new();
    private Dictionary<int, (MenuEntry? today, MenuEntry? tomorrow)> allMenuPreviews = new();
    private Dictionary<int, Dictionary<DateTime, MenuEntry>> weeklyMenuData = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load available menu types
            menuTypes = await MenuRepository.GetMenuTypesAsync();

            var today = TimeZoneService.GetCopenhagenDate();
            var tomorrow = today.AddDays(1);

            // Load all menu previews for the next 7 days
            var endDate = today.AddDays(6);

            // Get extended menu data for the week view
            foreach (var menuType in menuTypes)
            {
                var entries = await MenuRepository.GetMenusForDateRangeAsync(today, endDate, menuType.Id);
                weeklyMenuData[menuType.Id] = entries.ToDictionary(e => e.Date.Date, e => e);
            }

            // Keep the original format for compatibility
            allMenuPreviews = await MenuRepository.GetAllMenuPreviewsAsync(today, today.AddDays(1));

            lastUpdated = await MenuRepository.GetLastUpdateTimeAsync();
        }
        catch
        {
            lastUpdated = null;
            allMenuPreviews = new Dictionary<int, (MenuEntry? today, MenuEntry? tomorrow)>();
            weeklyMenuData = new Dictionary<int, Dictionary<DateTime, MenuEntry>>();
        }
    }

    private string FormatLastUpdated()
    {
        if (lastUpdated == null)
            return "Menu data not available";

        var localTime = lastUpdated.Value.ToLocalTime();
        var timeAgo = DateTime.Now - localTime;

        if (timeAgo.TotalMinutes < 1)
            return "Menu updated just now";
        if (timeAgo.TotalHours < 1)
            return $"Menu updated {(int)timeAgo.TotalMinutes} minutes ago";
        if (timeAgo.TotalDays < 1)
            return $"Menu updated {(int)timeAgo.TotalHours} hours ago";
        return $"Menu updated {localTime:MMM d, yyyy 'at' h:mm tt}";
    }

}

@{
    if (menuTypes.Any())
    {
        var today = TimeZoneService.GetCopenhagenDate();

        var menuData = JsonSerializer.Serialize(new
        {
            menuTypes = menuTypes.Select(mt => new
            {
                id = mt.Id,
                name = mt.Name,
                slug = mt.Slug
            }).ToArray(),
            weeklyData = weeklyMenuData.ToDictionary(
                kvp => kvp.Key.ToString(),
                kvp => kvp.Value.ToDictionary(
                    dateKvp => dateKvp.Key.ToString("yyyy-MM-dd"),
                    dateKvp => new
                    {
                        title = CalendarService.CleanupTitle(dateKvp.Value.MainDish),
                        dayName = dateKvp.Value.DayName
                    }
                )
            ),
            startDate = today.ToString("yyyy-MM-dd")
        });
        <script>
            window.menuData = @((MarkupString)menuData);
        </script>
    }
}
